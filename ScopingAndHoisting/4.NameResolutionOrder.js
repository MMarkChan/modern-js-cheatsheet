/*
需要记住的最重要的特例是名称解析的顺序。我们知道名称进入一个作用域有四种方式。
1、语言定义：所有的作用域默认都会给定this和arguments这两个名称
2、形式参数：函数可以带有形式参数，它们的作用域是此函数的函数体
3、函数声明：类似"function foo(){}"
4、变量声明：类似"var foo;"
以上的顺序就是名称的解析顺序。一般来说，如果一个名称已经被定义，它是不会被后面另一个相同名称的属性覆盖。
从上面的顺序可以看出，函数声明要优先于变量声明，这并不表示对名称的赋值无效，只是声明部分被忽略了而已。
但也有一些例外：
a、内建的arguments行为有点古怪。它看起来和形式参数类似，但却优先于函数声明。这意味着一个叫arguments的形式
参数会优先于内建的arguments，即使这个形式参数是undefined。这是一个不好的特性，因此不要使用arguments作为形式参数。
b、在任何地方试图把this当作标识符使用都会引起SynctaxError。这是一个好的特性。
c、如果多个形式参数的名称都一样，则最后出现的会优先胜出，即使它是undefined.


*/
